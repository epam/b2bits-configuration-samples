#kafka.clients = consumer1, producer1

kafka.clients =

kafka.consumer.consumer1.groups = kafka_consumer


# Type is list, valid value is non-null string, default is empty. A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The
# client will make use of all servers irrespective of which servers are specified here for bootstrapping\u00e2\u0080\u0094this list only impacts the initial hosts used to discover
# the full set of servers. This list should be in the form host1:port1,host2:port2,....
# Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full
# set of servers (you may want more than one, though, in case a server is down).
kafka.bootstrap.servers = localhost:9092

# Type is string, default is "". An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just
# ip/port by allowing a logical application name to be included in server-side request logging.
kafka.producer.producer1.client.id = producer1

# Type is class. Serializer class for key that implements the org.apache.kafka.common.serialization.Serializer interface.
kafka.producer.producer1.topic = producer

# Type is class. Serializer class for key that implements the com.epam.fej.kafka.KafkaEndpointKeySerializer interface.
kafka.producer.key.serializer = com.epam.fej.kafka.FIXMessageEventSerializer

# Type is class. Serializer class for value that implements the com.epam.fej.kafka.KafkaEndpointValueSerializer interface.
kafka.producer.value.serializer = com.epam.fej.kafka.FIXMessageEventSerializer

#kafka.producer.producer1.transactional.id = producerTransactionID
kafka.producer.producer1.transaction.timeout.ms = 5000
kafka.producer.producer1.max.block.ms = 1000

#kafka.producer.producer1.startOnload = false

kafka.producer.producer1.groups = kafka_producer

# Type is string, default is "". An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just
# ip/port by allowing a logical application name to be included in server-side request logging.
kafka.consumer.consumer1.client.id = consumer1

kafka.consumer.consumer1.topics = consumer

kafka.consumer.consumer1.fej.store.and.forward = true

kafka.consumer.consumer1.topics.regexp = topic.*

#kafka.consumer.consumer1.startOnload = false

# Type is class. Deserializer class for key that implements the com.epam.fej.kafka.KafkaEndpointKeyDeserializer interface.
kafka.consumer.key.deserializer = org.apache.kafka.common.serialization.StringDeserializer

# Type is class. Deserializer class for value that implements the com.epam.fej.kafka.KafkaEndpointValueDeserializer interface.
kafka.consumer.value.deserializer = com.epam.fej.kafka.FIXMessageEventDeserializer

# Type is string, default is "". A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either
# the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy.
kafka.consumer.group.id = kafka_consumer